(341) Java Spring Boot 14 Years Interview Experience [God Level Skills] - YouTube
https://www.youtube.com/watch?v=gSwgHC5apX8

Transcript:
(00:00) hey guys today we have Shri Kant and he's having total 14 years of experience 7 years in Oracle and S years in Java spring Boot and micro services so hey hi Shri how are you yeah hi I'm fine how about you yeah I'm also good shall we start yes please yeah so uh shant can you please uh explain your recent project and also introduce yourself uh yeah sure yeah yeah uh myself shriti um I associated with the service industry uh from past 14 years MH uh I I predominantly work on U Technologies uh domains like Ecommerce retail e-commerce
(00:49) mhm and Telecom e-commerce so I may predominantly work on um Telecom e-commerce clients and as well as on banking clients as well banking domain as well so uh my major you know the tasks that on a daily basis which I do is like first you know um I used to check my entire the development of the code what they have done so far to take the latest builds latest checkouts for checkout and then uh take the daily participate in Sprint ceremonies where we do the grooming of the stories and you know the clarifications or the you know design
(01:35) clarifications and the requirement clarifications I part in that session with Cent with the client and then uh you know we do have every day uh to check the vulnerabilities the defects that are coming in in the application so to cross verify them um you know on every alternate days to check whether we have any uh sity highest sity vulnerabilities so that we can you know reduce them to push the code into the higher environment okay okay so uh you must I think you must be uh leading uh features and all right in your current projects
(02:18) and you might have some uh Juniors developer uh so you right so how do you how do you review their code and like uh how do you collaborate uh with your Junior developers and uh how do you work as a team can you please uh give a brief on this sure sure yeah so basically you know we use genin cacd pipeline in that process like U uh once you you know build your application or build your code so we will do the code scan where we'll get the complete uh you know uh code vulnerabilities and this one I mean CV bugs so where we first you know reach
(03:05) out to the developers first before that like to see like how the uh developers have written the code like we do a peer-to-peer code review peer-to-peer code review right so where to identify like you know proper camel cases are being used okay so for that like normal we use the STS spring tool suit or throw uh you know we can do a common uh live sharing session to do the code review and then we completely you know understand like the feature wise how the developer has developed the code so for example the feature called like search feat search
(03:48) feature okay but the specific search feature how the developer has written the entire code so like whether the uh each class to interface or interface to you know class how the mapping is done whether the proper you know proper extensions whether the solid principles they following best practices best practices code best practices so all these has been you know reviewed over the code especially with the you know the coding standards as per the coding standards M proper usage of uh camel cases proper us of you know the
(04:29) functionality names okay okay as for the business requirement so all this will be you know taken careing code review okay so have you ever faced a challenge while uh working with your team for example uh let's say there is a deadline coming uh but your team is not able to uh produce the work and you had face some issues with your client have you ever faced this situation and if yes so how how do you overcome uh to this headline things right so yeah recently it happened like uh uh when the developer has accepted
(05:09) the story uh which tend to a story of size bigger than one Sprint so initially the story has given of eight story points which is midsize story mid midscale story but however it tended to 14 story points so during which like you know during the mid of the Sprint we came to know that this this cannot be executed in the single Sprint MH then we had a discussion with the we brought the client into the our Sprint call call and we discussed the you know the story and uh we sorry uh I mean refactor it right I mean we discuss like what we can deliver
(05:55) in that okay we created several subtasks in that and we told that and we inform the client that whatever the stories that can be delivered as part of this print is this this story has uh around five to six substars MH and the story first of all can be divided into two stories okay Story one uh will be of eight story points and remaining will be taken care in another Sprint so where we explain the client that you know what are the challenges like say in that story like what happened is the design as for the design we
(06:33) implemented search feature search feature is based on certain input parameters okay but later on the client has introduced uh client has clearly mentioned in the requirement that the search should happen not only based on single parameter but it should happen with the multiple parameters but while implementing that multiple parameter features we came up with multiple issues then story has became an uh you know elaborated story with 16 story points that we divided them in upcoming Sprint and informed the client
(07:11) ahead okay okay so uh moving ahead how did you use sonar for maintaining code quality and can you give an example of a code quality issue that helped you resolve uh something or any feature or anything thing right so sonar Cube issues like yeah especially you know there is something called SAS and Das static code analysis and dynamic code analysis as part of vulnerabilities okay so uh during the static code analysis like you'll come across with the SQL injections MH like user is going to introduce some passwords sometimes developer is to you
(08:00) know uh type cach the password MH okay so and because of which it leads to SQL injections yeah in order to avoid that like we uh we do complete with the help of sonar Cube we do the complete code scan to identify such vulnerabilities okay so and then we do complete uh um analysis using you know there are certain um you know tools are available like SNK so with the help of those tools we identify first of all is there any version upgrades are required using the libraries M because we use multiple libraries yeah yeah do we require any
(08:49) version upgrades MH so that uh we do first and then we identify like you know any uh after usage of such libraries still we have cities are there that we will trace it out and then we'll fix them upcoming release so in an overall n like we do a deep dive by by taking the sonar Cube report M which uh you know sometimes we used to generate by ourselves or we can generate with the help of you know uh you know cicd team got it got it okay so uh have you ever seen class note found exception uh in your project and if yes then how can
(09:35) we resolve it yeah so basically the very first thing that we can do with with using the class not found exception like first of all while running the entire code base we see and whereever we have uh with respect to the classes that we Define if the class is particular class is not available okay so first we will check the class path okay our class path so um and we will see whether the class is particularly loading loaded or not MH okay okay so once we verify that then we will directly going to you know uh see
(10:23) like where this why this class path is not picking the particular class mhm okay right so in my particular folder structures and then uh I'll identify that the St of package is not being picked up and then uh we will see and we will identify the root cause by identifying the specific class bar and then fix it okay okay so yeah correct so sharikan can you I think your face is moving down can you uh oh okay up your now yeah now it's fine oh it's down again I think but but it's fine uh yeah okay so
(11:08) before uh moving on to the next question uh I would like to introduce one thing for the viewers so uh actually uh we have designed the interview preparation package structured step by step containing 16 PDFs so it's basically a onetop solution to crack any interview and this package covers score Java spring framework Maven kits spring boot scenario based question Spring Security spring mvy spring data jpa microservices hibernate General Java coding question stream API Cod question and many more and you know Shri the best part is that
(11:42) people have been telling me like they have cracked their interviews with this material and there is a 99% chance that the interviewer will ask from this package so after this interview I will uh add uh to get uh that package I mean I will add the link in the description okay yeah now move moving ahead uh can you explain how hashmap Works in Java and what happens when two keys have the same hash code oh okay yeah yeah so basically hashing is one of the algorithm that is being used to identify you know uh where it stores the entire
(12:22) uh values the entire the key values in address location in a bucket format Okay so so that will give you uh the address location of each key where the value is being stored MH okay so that that is the way it it involves like uh whenever you identify whenever you store any value in the you know in that hashmap variable it will first create when you say map dop put key comma value it will refer that key refers to a particular location which is address location in your HEAP memory MH so that's how it will point to uh each
(13:11) each key points to different different buckets location the map and that will give you the individual path so it is very much important to you know to use to override hash Cod and you know equals method otherwise it because of which it leads to sometime memory leaks okay yeah okay so what happens when two key have the same hash code a collision collisions okay uh so do we have any solution for the collisions uh yes but right now I'm not able to recollect that okay yeah so uh have you I mean have you did you get a chance to work on
(13:58) concurrent hhm uh in your project okay can you please brief on this say again uh can you please brief on this uh concurrent hashmap concurrent hashmap yeah yes so basically concurrent hashmap is one of the wonderful feature like especially for for doing the implementing the lock on the particular thread M so basically when we compare with the normal hashmap one current hashmap is very much threat safe okay so where you know at a time multiple threads can access it so without any synchron synchronization issue M so one of the main important
(14:52) feature of using this hashmap uh you know uh if you want to lock a particular por of the map mm let's say you know if you want to lock certain certain key or certain value key then you can use this concurrent hashmap and you can you know completely do the right operation on that particular hashmap on that map okay so that is the main important feature of using this uh so how okay okay okay all right so how does this current hashmap improve performance in a multi-threaded environment yeah because you use the
(15:38) synchronized since it is a synchronization uh because of threat safety you have a a feature like you know it provides a synchronization where one thread at a time can do a lock on that particular object okay okay so while doing uh any kind of retrieval operations MH time you know if number of threads are are doing you know a fetch operation M but not the update operation the here the thread should lock it lock the particular segment okay so in which you know threads want to operate so basically this there is another name for this one
(16:19) is called segment locking or a bucket locking okay where you can use this to you know lock on that particular object till you perform the write operation or fetch operation on that particular object so that is how you use the concurrent hashmap okay okay where you can avoid using you know insertion of null objects using con concurrent hash okay okay okay so uh can we create immutable classes in Java uh if yes yes yes uh okay so how can we create yes using final keyword okay yeah when you when you declare a class you make class with the
(17:06) final keyword final CL as well as private right yeah final class class name and members as private me the key variables as private members and where you don't have Setter methods only getter methods you have so why I mean why we should not have Setter methods yeah because you are if you if you are giving an access to set right you are going to change the value yeah okay okay uh can you please explain transaction Management in Spring transaction Management in Spring yes uh you know using at theate transactional M
(17:49) operation so uh let us say you know um you are doing uh you know uh Airline uh online reservation operation okay you booking a ticket and airline ticket okay okay so now now you are entering the entire passenger information okay like name address you know how many uh how many tickets are you required like all the entire passenger information you are entering and once you enter the passenger information you are making you know payment let us say while doing the payment operation um if the payment operation is
(18:27) successful okay entire and the entire transaction is saved in the database using at theate transactional operation in the using springing boot so if in case let's say while doing the payment if any of the uh payment operation or if the payment operation is failed because of payment services down the entire transaction will be rolled back okay that is a feature given by the uh annotation okay uh okay so moving ahead uh can we customize a specific Auto configuration in springboard can we customize sorry say again uh can we customize a specific
(19:16) Auto configuration in a spring board yes but I don't know how to do that I'm not sure okay okay yeah no problem uh basically you know uh the the customization basically we have you know meta inf. factories okay yes so where all the configurations has been configured in The Meta metah Hy INF folder so in that uh all the dependencies being you know provided while the container is going to check whether the specific Bean is available or not so okay that is one of the key you know configuration to provide the feature of
(20:04) Auto configuration okay yeah yeah nice yeah moving ahead uh as you are as you are leading some projects and you already Leed uh many things in the past so can you tell me what are the main challenges in designing microservice based applications right yeah so majorly uh like you know what I faced in my application while you know while I'm migrating the application from one data source to other data source okay um the major challenge is um as we say each micros service should have their own database okay basically micros
(20:54) service is a small unit a single small unit where you can which can be easily Deployable and independently developable you can develop independently without any language specific you know language platform you can develop a micros service and you can scale it in independently correct so you have payment service you have a shop add to card service and you have check out service user manag service yeah so let's say during any seasonal like say you are getting a big billion day so during That season you want to scale the you know
(21:31) that tomorrow is going to be a big billion day where the sales will go high okay right so you obviously you can go and you know you want to uh you know want to scale your service rather if you use a monolithic application is very difficult to scale you have to make your production down and all however here since each microservice is independently Deployable and developable okay you can use that uh you know you can only scale that particular service service that is a feature given by with the help of micros service now
(22:07) in my application coming to to my to the question like where I was developing when I was you know developing my micros service independently I face the challenge that initially we thought of going for a common database across multiple Services across multiple services so we had around five to six services which were developed for migration uh but what happened is we had a common database MH now what happened um when a particular transaction is done in one particular micros Service uh you know it is uh it is not being updated uh you know in
(22:49) other service because it was not event driven service it was a normal basic micros service which is trying to having a common database okay in that scenario what happened uh like uh service one is having data some X data which is not updated in the service 2 so this is what you were facing while using same database same database okay then uh we made you know a common datab in separate databases across each service M so even as per the micros service design uh you know characteristics each micros service have their own
(23:30) database okay so which helped us you know then we later we configured a separate schema for each service okay so like what stopping uh I mean uh as you said you were using a same database and it was uh I mean you were facing some challenges updating uh details in other tables uh in other micros service right so what was the actual issue like what was the root cause of De like why uh other microservices datas are were not being stored when you were using a single database like what was the root cause I mean common database yeah in
(24:17) common database case right because we used you know uh there is a third party tool called Li Bas so yeah so where uh user are not allowed directly to operate on the production database you can use uh this liquid base tool to you know to do the all the transactions like CR operations so okay the major challenge that we faced is MH for example if you are uh uh for a common database also we have separate service MH okay now let us say uh since we are using common database M that micros service should always be up and
(25:00) running okay okay so if any data if any changes happens M you know if any data read or any feed comes in uh from your in from your external systems uh you know you have to update the database now you have updated the database but since that service is not updating the content to all services so like you know service a is there service B is there service a is common across all services okay which is a common database service now service B is individual service service C is individual service now since if you don't use a EV event driven
(25:44) database even driven microservice approach MH okay then what happens is when you when some updates happen in your a database service M okay then this data should be appropriately communicated to other services or okay the other services has to read the data from common database on frequent basis on a scheduled basis okay so that only will happen when you have an you know pobs up pattern or if you have you know if you use any uh so what's this psup pattern uh canup pattern is yeah publisher by subscriber where you know
(26:24) uh if you take uh message broker okay message broker is one pattern where you know the messages will be sent and read read and sent through a pops up pattern okay okay now let's say the common database if any any changes happen in the latest data has been stored in the database then this has to communicate to other services that only will happen if you have a an event if you trigger an event listener through which that even by micros service a will read with micros service B similarly micros service b c will read with micro service a so it
(27:08) will read the the data has to be transmitted to all services when you use this pet pattern okay okay okay so that is we call event dver microservices so the challenge that we faced is since we did not implemented event driven mhm we face this problem of using common database then okay we came with two approaches one is to have a separate database for each micros service or okay go with a pops up pattern or message broker even driven micros service so that we can use either like message broker like cka M or you know okay okay
(27:51) any other uh message broker patterns so that uh that it will for every change happen MH common database so it should trigger an event and that should be read by Pub and sub model for each mic okay got it so yeah moving ahead uh how would you toize a spring boot application for development and production environments right so basically we use uh you know uh we have Helm charts you know okay in the cacd pipeline generally what happens is whenever you do uh you know uh whenever any new change when commits A Change Control
(28:44) Systems MH then that after you know you do a build scan you know okay once you build it you do a complete code scan and then MH you give it to the you know um your uh uh image team so the docker Docker it will create an image okay so once you create the image you will do image scan and if there is no vulnerabilities then you know push that image to the GitHub repository you same depository or separate one now this particular latest changes whatever in VCS has to go in your kubernetes cluster okay so generally what happens kubernetes will
(29:29) read Helm charts okay frequently so that Helm charts will give you which what is the latest uh you know latest code based version is going in so any changes happen on the particular you know uh latest changes are coming in uh through a patch so through Helm chart it reads the complete data and then push it into the kubernetes cluster so that's how we do uh production and as well as in yeah uat or okay okay okay so uh moving ahead can you explain the maven life cycle and its faces no I'm sorry I'm not aware of that
(30:19) okay okay no worries so I so MAV I think it says like clean uh site default so like verify install complete test package these are some like overview I'm giving uh like uh phases name okay so moving ahead uh uh how do you ensure your Java application are scalable and maintainable yeah first thing is I'll make sure there is a loose coupling okay between the components correct okay so and I'll make sure to follow the solid principles okay so where it says like you know uh s means a single responsibility each class should
(31:11) hold would hold a particular purpose okay okay each class serve a particular purpose rather than combining multiple uh you know objects into single class so each class should have own single responsibility similarly refers to like you know open and close open for extension close for modification modification yeah so that tells you know indirectly like you know you can extend the class and do your uh you know your operations on top of it rather than modifying the existing class similarly L tells about you know L
(31:47) substition principles which it says uh your dered class should be substituted with the base class so whenever you Define a derived class so at any given point of time it should be replaceable with the subass Base Class Base Class similarly you have this you know integration segregation interface segregation principle where it will tell you know uh you should not force the client to get you know Implement all the unnecessary methods okay rather ask to ask them to implement what whichever are required okay so for
(32:27) that we we know we Implement multiple interfaces based on each purpose and we have the other one is about the dependency injection required dependencies will be injected by container at the given point of time so which makes uh our know life helpful with the help of ioc very helpful so that's how you know I follow that so uh yeah just one quick one quick question so like whatever you said I think uh that is for maintainable uh but what about for scalable yeah but but basically you know scalable itself will
(33:07) say you know when you want to scale your application you should first of all convert your application from monolith to micros service micros service so cannot we scale monolithic application alone it is very difficult because uh first thing like what what challenges would we would be facing challenges is mainly deployment deployment yeah because when you do certain change you should inform everyone in that the team because everything will go in a single bar file or file cor okay okay so every time when you do
(33:43) change all the you know module leads has to be informed and the entire build has to run for a small change in the you know add to card feature you're doing entire build of the application correct consume a lot of time yes okay so moving ahead so what's your approach to error handling and logging in Spring boot application yeah uh we have mechanisms given by know spring boot like you know we uh exception handling we have for a to handle the global exceptions exception we use the atate controller advice we
(34:26) Define for the class so that that controller advice can be used when you when you define that at the controller level so that you can handle all the exceptions globally okay whereas if you want to handle exceptions at the method level we use at theate exception Handler to handle the exceptions by specific methods okay and uh which uh log analysis tool you prefer uh just analyze come again kibana kibana okay and do you have you used any other tool other than kibana yeah we use earlier like Splunk Splunk yeah we used
(35:13) different so what if if client uh ask you to implement this log analysis and it's up to you like you can choose either anyone like kibana Splunk or any tool so which would you prefer see the latest as a trending market like you know which will give you the more efficient results M you know within given span of time uh if you are able to trace the complete log and able to fix the issue within short period of time okay with very hasslefree way of you know debugging the things that tool is more preferable most mostly the current
(35:55) Trad market like you know Kiana is playing in major role you know in order to doing the uh the tracing of the loging logs okay yeah okay uh can you uh discuss your experience with the integrating third party Services uh in any of the project yeah so uh majorly like you know uh we integrated uh uh third party services in our applications like we use PayPal especially for payment services and we integrated uh you know to get the pricing details so we integrated the pricing service with the uh you know third party all the seasonal base prices
(36:49) okay all those coming from from third party uh that we integrated and uh we integrated uh especially user informations you know in one of my B2B application so entire user informations are coming from from some third part third Source Third Party Source which user has logged and all the data you know to authenticate and authorize the user we integrated their existing third party system to get the user information and what permissions he holds like what roles and permissions he holds before he access the application okay okay okay uh
(37:31) okay so moving ahead uh how do you keep up with the continuous evaluation of the Java ecosystem uh because you are having 14 year of experience uh in this industry uh you have seen uh the Java's very I mean I I think you have worked on the Java's lower version older version and you also working on some newer versions of java so how do you keep up with the continuous evaluation yeah very simple things like you know Java you know it's a very vast language every on every six months you can see or on year on year basis you
(38:12) getting a new versions features let's say you know comparing from java 8 to now you know 11 and 11 to 17 and 21 so there are features like in 17 introduced the feature of you know the V keyword yeah V keyword so we can directly use that and similarly they enhanced the uh usage of the garbage collection yes they changed some algorithm right so like that you know because the major uh uh patches that come in because of the older version having some you know some trade tradeoffs okay when you trade off between version to version definitely
(39:02) the lower version has some issues like say most of the times even I fac is about memory Heap issues Heap memory issues so most of the times we tend up to using like uh in your application like having memory leaks so they keep on questioning you know in my in my application like one of my client was asking the very first question to the newcomer that how do you handle all the memory leaks in the application okay so so that you make sure that uh your code will be safer secure and without any leaks so that was the you know Target
(39:49) given for a certain Milestone given for certain Sprint major issue like you know happen is like whenever you deoy the application you are getting uh uh all sort of memory Heap issues M so like version on version upgrades so you have to see how you can overcome such issues and based on that uh I'll keep you know I'll make sure that uh whatever the feature I Implement whether this feature how you know how better I can scale that feature using the existing technology MH so that it will be end up you know uh for a for a
(40:35) long duration at least you know down the line duration of time rather you know should not lead up to uh having a tight couple tight coupling products which will again uh you know which leads to very uh uncomfortness to the new developers yeah yeah yeah correct correct so so moving ahead how do you ensure Security in your Java application or spring boot application yeah we have the feature like you know uh Spring Security yes which uh yeah through which you can uh achieve the the major chunk of you know implementing the securing
(41:20) your application okay let's say you know when the request comes in m and uh if you a PA Gateway MH reads the request and authenticates and authorize the request M then only the user is allowed to access my micros service so here the main gateway the main roadblock is authenticating and authorizing the user right so that feature is predominantly you know very well uh we implemented using you know jwd tokening JW token and it's a very elaborative subject object to explain in short you know to authenticate an user
(42:02) and to authorize an user JWT provides uh completely uh by payload signature and header it authenticate and authorize for every request by passing a token for a subsequent request to access a micro service and it provides entire data or the user in a security context object and you can access a security context and fetch the user details MH what user have what what is the user details like which user has logged in and what permissions he has and uh what he can do on my application so all these things uh uh we you know we can achieve through
(42:47) that we can achieve correct so uh shant uh you must have visited on uh food delivery app like swii Alro right uh so uh can you please uh let's say if a client ask you to design a food delivery app from the scratch so like how would you design yeah first uh you know first I will start with um you know understanding what are the different entities that comes in okay okay we will first we'll see that we'll create the tables tables like you know let's say you know uh user MH or customer so um customer ID customer name customer in
(43:34) you know customer food Choice similarly menu is there menu item menu price so similarly you know orders how frequently he has made an order okay similarly restaurants so which particular restaurant he prefers food so he'll prepare entity for restaurants restaurant ID you know restaurant details what kind of you know good items it provides M like V or non W so like that first I will Define all the entities okay and then I'll see the relationship between them so you know that is cardinality between the data
(44:13) models model and once you have that you know you should be able to First understand the complete ecosystem of that application okay so that uh whenever you make whenever you touch base one particular entity and if you want to map that with another entity you should have proper cardinality okay so that should lead you to the uh enhanced you know whenever you extend on top of it it should be easily extendable okay that I'll make sure so that you can successfully push the you know generate the code based on it and
(44:57) once you have the data model ready you can have so many tools or framewor available in the market you can pick up the best one start you know implementing that okay yeah uh shant have you worked on stream apis uh can I ask you one coding question can you please share your screen I will ask you one question then M uh we will just wind up yeah so uh the question is okay so you have to write a Java program to count the occurrence of each character in a given stram through the stream API right you are able to see my notepad
(45:52) uh one second yes yes I can see oh yeah just a minute one second yeah yeah yeah sorry please go ahead yes yeah I was getting some important call from home yeah that's fine okay okay so yeah I asked you one uh stream API question so it is uh you have to write a Java program uh uh to uh one second uh
(47:00) yeah you have to write a Java program to count the occurrence of each character in a given string okay uh by using stream API okay so let us take you know the string M um as like Java program okay so now you are saying that uh I have to count the occurrences character right yes yes correct the question so here like I can say a occurring um a is coming per three times uh three or three times right yes right J one time MH and V one time MH and P one time right MH and R for two times M and maybe one time P one time r two
(48:07) times o for one time right yes yes right and G one time and M1 one occurrence right so right so you now to print this first thing is there are multiple ways to do this okay so the very uh very basic way that we can use is like you know you can use a map you can define a hash map and you canate it uh if the map contains the particular key or not and then get the count but using API since you ask for the stream API concept so yeah we can use we can implement it using uh you know map concept like let's say uh I want to split this thing
(48:57) okay now I can use array. uh split okay M so okay so where I can no AR do stream okay where I can say I'll split the string string. split yeah okay yes yes correct and then I'll say do where I can collect it the data MH so I can here use the grouping so grouping by is one of the feature provided by uh colors your uh Java 8 streams so to to get the uh you know to group The certain same character together data like string operations it is similar like in database operation in database we use grouping function like in the same way
(50:01) you can use here grouping by okay to do multiple operations like you know identifying the count doing the mapping the key and comparing the key and values okay so you can use this grouping by where you can use first you identify the function uh so that is function do identity M where this will be used to get the identity and where you can get the counting collectors dot counting okay okay so now once you get that you'll get the count now now you will get this count uh in terms of uh you know uh like you can say
(50:54) uh a is how many times is coming B is how many times it is coming it will show all those values M yeah now you have to render this value either in uh into a map or because it's a key value pair a is occurring one so a is a key one is a value one is a Val so I can map it to map object like map okay where I can use string comma so the list of streams okay okay okay so where I can say map equal to this one ARR dot so from where it starts MH now you will just print uh the values size right yeah I'll just values that uh op of
(52:00) uh um car occurrences character occurrences map that's how you can print that value okay yeah it's correct I I think I just found uh this as a new way I didn't think the solution this way a unique way I think yeah yeah simp very simple know two lines of code to get that in case of if you take normal approach it will be six or seven lines yes yes correct yeah yeah okay shant uh it's uh done from my end and it was very very informative uh session I just learned a lot of things oh no problem yeah so like
(52:57) uh would you want to uh give because the viewers of this channel are mostly from uh 3 years of experience two years one years uh so like would you want to give some advice to the youngsters uh the junior developers anything yeah so the only thing is like you know make sure you practice the things on a regular basis so practice makes perfect so have a regular practice on the coding especially you know because when you develop any uh you know any monolith to microservice application or if it take my monolith as well so you have to know
(53:40) the concepts very clear M you have to have the clear understanding of the concepts before you implement them okay so make sure you practice them on a regular basis and ensure that you know whenever you take up any interview calls M so uh you first have the complete thorough understanding and having a perfect 90% I can say people are failing today because of just listening to the videos or listening to the you know just listening some lectures and directly they're going for interview so if you directly go that like when you start
(54:19) when they ask you start writing code then you know you cannot able to make it out so uh as in when you listen done something you just make make sure that you practice it yeah you should Implement that thing as well yeah you should uh people nowadays people what are doing is they are just learning what is right but they haven't implemented it right right that's how they are losing it yeah yeah okay so yeah okay shikan thank you for your advice
