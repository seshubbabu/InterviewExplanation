(341) Java Spring Boot 3.5 Years Experience Interview - YouTube
https://www.youtube.com/watch?v=UImkPITyTZU

Transcript:
(00:02) so hey guys today we have Rahul Kumar and he's having almost three and a half year of experience in Java and Springwood and he has worked with multiple companies so hey hi Rahul hi fan shall we start sure we can start okay so can you please introduce yourself sure um I have total 3.5 years of experience I have been work on two companies that is I started my career in 2020 with vpro limited I work around 2 I worked almost like 2.
(00:34) 5 to three years there then then next I worked for the currently I'm working with infosis limited and in both companies have I started my career as a Java developer then I started then slowly I learned Springwood framework then I switch to theing framework where I develop the rest apis and currently working as a Java developer only where I'm working on the framework called uh spring springbot where my job is to uh my my daily activities is to develop the rest apis which is communicating with which is integrating with the database back end
(01:07) uh which is doing the various operations like retrieving the data from the back end or updating the database or inserting the deals or various operations and it and my apis is is integrating or talking with the front Ed like in my previous project in my previous company the front end was the Android where the it used to integrate the Android in my current company the front end application is the angular where it integrates the angular for the uh front end technology so back end is the spring board front end is the
(01:36) angular so this is the complete overflow and the back end and the database is the Oracle so this is the this is the complete architecture of our project and it's a monolithic architecture architecture okay so you didn't get a chance to work on microservices yet uh in my professionally I haven't worked on the mic but personally I do know the micros and I have recently I have completed one complete project in the microservices architecture okay okay nice so like which which one uh like would you want to prefer microservices
(02:13) or monolithic which one would you like to prefer means it's means both have advantage and both has disadvantage what I think like monic has Advantage also it has disadvantage also yes and micros Serv also has the advantage and it has disadvantage also I will tell like Microsoft's Advantage like you can segregate the applications like one application has one business logic completely another Services can separate business logic yeah we have as per demand we can choose either micros service or architecture yes yes you can
(02:47) scale up you can scale down but when it comes to the debugging it it will take it can take a week but in the micros but in the monic architecture the coding and the development is very easy but the scale down scale up is very difficult okay the complete application gets down yeah I got it so which spring boot version do you use in your current project actually completely we used 2.
(03:11) x we haven't to 3.x yes okay okay okay so uh can you please share any uh database table name which you have worked on in your current project okay our project is on based on the agriculture so the database like using the crop like like sqc uh like we it's agriculture project so we are table name like crop uh crop table is there sqc crop analysis like these are the various table names which are using on day to basis okay so how do you secure uh rest apis okay so we have the various layers like before the request come to the uh
(03:53) our backend there is a apig team which uh before me which handles the request so in that the security is implemented like for the spring there is a Spring Security however we don't do the security in the spring layer there is a AP team which handles the all the security so when the request when the when the request you guys are working in the securing rest apis yes yes yes there's a different dedicated team called the API okay but but like if you get a chance to uh secure end points in different project
(04:27) so how would you secure like uh yes there are yes yeah yes there are various ways like the most prefer I I would like to tell is the JWT like there are o there are like key clo JWT but uh like I know the architecture of like a JWT so it is the most in demand JWT Jon web token okay Json web tokens yes yes okay okay and uh uh like have you integrated any caching uh as of now not inating not integrating but I know the concept of caching okay so like why do we use caching in our project uh can you tell me uh any use case of the caching yes
(05:10) yeser suppose yes yes suppose uh suppose I will tell you like there was one Ed Case in my previous company that it was I like like it was the AWS scenario where our application used to it was integrated with the AWS one services and it was hitting the AWS reason somewhere and every time when it will hit that reason so it will take lots amount of time we know that it will hit every time that Reon only so instead of hitting every time we know that it will hit the de reason only so instead of hitting every time what we'll do we will cash
(05:44) that things we will cash that that that scenario somewhere else so instead of hitting that thing it will just not go directly there it will it will instead of that it will go to that place only and it will retrieve the data from there it will get back to there so this is how we it was implemented over there in the database also suppose instead of creating the object every time fetching the object from the database same time we can cast that table or that object into somewhere caching so instead of hitting the
(06:15) database every time it will cash that from the that caching mechanism and it will not hit the database every time so this is how we can implement the caching to avoid the time taking or the retrieval time so this is how the caching Works got it so can you tell me some key dependencies uh in order to create any spring boot application what are the key dependencies yeah sure sure like the pal dependencies which we add right uh yes yes XML okay okay the first one is the web we web we need the web dependencies for the embedded tomit
(06:51) server and all those things the another one for the uh for the uh for the database we need the MySQL connector or the we using the Oracle then Oracle like MySQL or the Oracle web driver another we need the diff tools then we need the if you're using the security then Spring Security then we need the uh these are the then we need the if you're using the okay yeah and then if you're using the Lomo the Lomo and if you're using the Kafka then means the kafa so but I think these these are not key dependencies like longbo I mean if
(07:27) we don't web is the main key web in the my SQL driver is the main I think okay okay okay so uh what is versing in rest uh restful apis do you know yes yes uh suppose I have developed an API for the Sprint one Sprint one I develop one API I have deployed that API into the da or the stage after testing it has been deployed to the production in the Sprint to some requirement come where in the in the existing API only I have to make the changes some new changes on the existing you have to changes so again when I will
(08:04) do the changes when again I will deploy in the day or the stage I have to I have suppose the naming Convention of the my API was the local host for I'm telling for the dev Local Host do8 8080 SL V1 SL crop for the next changes for next Sprint instead of deploying that changes what I will do in the in the SL V1 I will make it V2 because okay I have made some new changes in the existing AP so I have to change the version because in the existing only I have done some new changes so the if if some technical
(08:39) person is going through the API will come to know that okay this was the existing API and from the V2 will not come that we will come to know that there are some changes done to the existing API so through the V1 V2 V3 we can come to know the version of the API that okay there are some versioning done into the API This Is How We Do the vers okay okay okay so what are the spring boot starters and how do they work spring boot starters yes uh spring boot starters means uh can you elaborate like starters uh spring boot starter means
(09:10) like we have spring boot starter web we have spring boot okay okay like web data yeah yeah means modules like web data jpa all those things so what are these I mean why do we use these starters okay okay what's the purpose of having yeah yeah first answer this use for yes yes Bally we use springboard to give to have some predefined modules or the predefined uh functionalities suppose in the spring boot we don't want to add the uh server manually we want that the the spring boot provides the uh server embedded server so if you add the spring
(09:57) be web we will provide us the three uh servers uh three embedded servers man um automatic that is the tomit uh JT and under to so if you will add web it will give us three uh servers automatically we also want to develop the web apis or the RIS apis so we will give us all The annotation and all the functionalities to our uh to the spring board to develop that API or the web applications so this all things is does suppose we add the another API like jpa so interact with the database or or use or to use the predefined method like find by ID find
(10:36) all or to save PR methods the database okay okay got it yeah and what's the purpose of a spring boot starter parent we have one parent right yeah we have the parent like so I think that parents yeah I think in the spring boot we don't the version when we add the uh dependencies we saw one line called version so according to that version when we add the dependency it takes the parent version and according to that parent version it automatically DS the version of that dependency so I think with the help help of that parent I
(11:19) think it version of that depend independencies right yes yes yeah it it automatically fets from the parent version so I think this is the reason yeah yeah okay so before moving to uh further questions uh Rahul uh uh do you know like uh we have designed a complete interview preparation package structured step by step containing 16 PDFs uh yes yes I saw this yeah so let me brief on this so basically it's a one stop solution to crack an interview uh this package covers score Java spring framework MAV get spring boot scenario
(12:00) based question Spring Security spring MVC spring data jpa microservices hibernate General Java coding questions stream API coding questions and many more okay and the best part is that people have been telling me they crack their interviews with this material and uh there's a 99% chance that the interviewers will ask questions from this uh from this package uh so after this interview I will share a link with you uh to get this uh if you need otherwise uh not required and also I'll add in the description of this video
(12:32) okay okay okay okay okay yeah so now uh moving to our questions uh like can you tell me about life cycle of spring Bean do you know yes yes like when when you when when you create the bin like I'm not 100% sure like when you create the bin in the in the spring bin like in the uh B it the like Bean is initialized then doing be in it it initializes the beIN then Bean is like Bean is worked still now you're using the entire application Bean is Tred means used from one package to another it travels M it is used until at
(13:20) the last when B destroyed B destroyed some annotation is used then the bean is uh destroyed something like this I'm not 100% you're sure like this still bin is from b b initializing B in initializing till last the bin is destroyed this is how this bin is no I'm not 100% sure about this yeah yeah okay no worries uh so let's say you notice at a spring boot application you are working on a significantly slower in production than in the development environment so how would you go about fixing the
(13:51) problem okay spring Bo application yes yes okay the first thing that uh what I will do now I will first of all check the loggers I mean the server logs I will see that might be there is a chance that the two services are communicating might be there is a chance that there is a communication failure or there's a there is a gap in the communication second thing can be that there might be there is a uh database calls and there might be the database there's a queries running in the back end table and there
(14:23) might be the different joints the complex the queries could be the complex and there are joints so there is a I will run the query in the the work in the my SQL or the Oracle developer bench and I will check the query time how much time it is taking so I will connect with the team I will try to optimize the query because the taking the time then I will connect the database team and I will optimize the query like then again I will Implement Implement that query into that our integrate that with our application and again I will
(15:00) run the application if still it's uh uh if it still there is a problem then definitely there is a problem in our uh communication between the application then I will check but the first priority is the query because our application the main purpose of the backend is to communicate with the backend table so this is I think the chances is there that here only the problem is there okay okay got it so uh let's say you need to migrate an existing application to use a new database schema okay in a spring boot application but without downtime so
(15:35) how would you plan and execute this migration without a downtime yes okay and new means suppose it's a my SQL to Oracle like this uh no uh database schema means that you just are going to the database structure structure whole database structure like different tables different fields okay okay then okay okay like this okay then actually what we did now in the spring boot application there is a configuration prop properties file application properties file okay um so so I think in the application or properties file only
(16:32) we uh write the schema name like in the URL we give the URL in the last we write the all the configuration about the tables about the database configuration so in that what happens when in the application properties time you can uh the function of that is the main advantage of that is that you can change the application properties of the configuration time as many of as many times without the down time means you have to just change the configuration time and just restart the server so you can change the schema or the table name
(17:05) or anything into their or all the property like username password or the schema or the URL everything and you can just restart the server so the downtime will not be required so I think this is one of the p means this is one of the technique how we can use means we can do without the downtime but if you want other than this then I think downtime will be required okay okay all it uh okay moving to next question so like how can we handle multiple beans of the same type like there are two beans uh or two more than two beans of the same type so
(17:47) uh how would you handle these beans okay okay yes there is annotation called at theate qualifier okay so at the rate qualifier will uh will help us to uh means uh let help us to know that if there are two bills with the same name with the help of the qualifier we can identify the two different bins so this is how we can handle okay okay we can uh use the qualifier right is there any other annotation as well that we can uh use primary at the prim M okay got it so have you handled uh the tri I mean have you used TR cat and this
(18:31) finally Block in your every day like we we we handle our application the main our main focus is to handle uh mean not finally mainly we use the try catch only try catch so and then finally sometimes we use like if you want to close any database connection then we find sometimes we use but main we use try catch try catch so what happens if a return return statement is executed inside the try or catch block does the finally block still execute if a return no no then finally want execute finally want execute okay
(19:11) are you sure there is a return yeah in try and in the catch there is a return either in try or catch if there is a return return statement either in try or catch so does the finally block still execute finally so basically I think it won't execute yeah yeah the finally belong uh execute even if a return statement is used in the tri cat blog it it basically used to ensure the cleanup yeah yeah so is it possible to execute a program without a catch block if so uh like how would you use try and finally it together like first tell me
(19:58) whether it is possible to execute a program without a again come again just repeat it again yeah yeah so my question is is it possible to execute a program without a catch block okay and there is only say yeah let's say you have addit a try Okay h and then finally direct without using catch so is it possible yeah it is possible try with finally is possible okay so why why it's possible uh because uh it's a combination like try with finally is possible there is a combination like com only try only try not possible try with
(20:54) catch or try with finally okay okay only try not possible try needs either a catch or try needs either a finally okay so how does how does exception handling with try catch finally affect the performance of a Java application uh affects the performance of the application yes like like what happens in the try we write the code which is going to execute in the catch which is going to which we think that in the yes yes in the try we write the all the codes which we think which could have which could cause the exception trying to divide a number with
(21:42) zero we think that this could cause any null pointer exception or we mean any exception this can cause then if this can cause then we try to handle this in the catch block this could and if we are trying and there is a something we think that there's a database connection or something we want that in the last database connection should left open because it will ultimately cause the database issue mean it will cause the database Port unnecessary waste of database Port so we want the database connection should get
(22:17) closed at the last after all the operation so in the finally block we put that so after all the operation the databased connection should get uh closed or or any operation should suppose or any things should get finally closed or destroyed so that part we put in the finally so this is how the entire operation gets executed and and alls the database uh using except this is one example yes okay no it's not it's a good practice suppose we are doing some database operation so in in the last what will happen that in the last what
(22:54) will happen some database operation will happen and database will means will remain open we don't want that uh we want that in the last every operation should happen and database should get closed it should means after all the operation database port or datab happen there are a lot of exception uh throwing frequently in our application from our application lots of exceptions are getting thrown yeah if if lots of exceptions are being thrown by your application so what will happen in that case okay okay what what will happen if there are
(23:31) lots of exception are being thrown the next lines are not going to execute Suppose there are 10 number of lines how this will affect the application uh I'm interested to know about the performance especially like whether it makes the application slower faster or it is neutral oh application means I think the readability will be very bad like experience will be very bad like if somebody is seeing the server going to going to debug the okay it makes the application slower yeah yeah yeah if there are a lot of thr
(24:12) exceptions are being thr frequently okay so can you tell me a condition where the finally block will not be executed yes no your voice is doing in system exit in that case finally block will never execute okay okay so you are saying yes uh you are saying if you use system. exis in uh try or catch execution uh finally block will not be executed not execute correct okay okay so can we write multiple final blocks yes we um finally no no only one finally we can have multiple catch block finally block I think we should have one okay I
(24:58) have hav't tried this multiple catch block I have tried but finally I have not tried any time multiple okay okay so what is exception and uh like what's the difference between checked and un checked exceptions yeah like checked exception is like in the compiled time only like check checked exception is the compile time like it will be checked in the compile time unchecked exception is the run time it won't be checked in the compile time it will check in the run time you will get this exception in the
(25:25) run time this is the difference okay okay so uh how would you handle multiple exception in a single catch block yes so there is the sequence like child to like parent to child child to parent suppose you are getting the uh like there is a like uh like there is a one child suppose the null pointer exception so how to handle like you are dividing the number by zero so if you'll put the exception block exception in the top and the null pointer in the below then you will get the error because you are catching the parent exception first and
(26:00) then you are catching the child exception below so you will get the error what you should do you should always put the child exception on the top and the parent exception on the last so if you want to handle the max multiple exception so you should always put the sequence from Child first then you should move parent in the last this is how you should uh handle the multiple multiple exception in one catch block catch block and what's the use of pipe here yes from me from sending to desending yeah yeah I got it so what's the use of
(26:34) pipe here do you know about pipe pipe oh no I don't I have not heard of pipe okay pip is just a straight line which uh uh divides the two exception I mean when we write the two exception in the same catch block we just write like I exception then a single line that that we call a pipe and then SQL exception so it means our catch is handling these two exception a single catch is handl okay okay okay okay okay so yeah yeah so uh do you know about string pool yeah string pool yeah yes yes so can you pleas brief I'm
(27:26) not asking too much longer answers yeah go ahead what is string pool yeah string pool like when yeah like in the like in the stack the string pool when when you define string a equal to uh Rahul then in the stack memory the string pool is created with the reference rul this is how the uh your uh when reference is creating in the stack okay in the sorry in the uh in the stack the string p is created with the reference in the one okay okay so are there any scenarios where using the string pool might not be Ben one string pool not
(28:15) beneficial not I'm not 100% sure about this okay so it will not be beneficial when there are a lot of unique strings because uh it will be complex situation to check each string inside the string fol okay okay okay so yes Rahul uh okay it's
