(341) TCS 3 Years Interview Experience | Java Spring Boot - YouTube
https://www.youtube.com/watch?v=9TLt9JiQBxc

Transcript:
(00:00) yeah hi uh could you tell me about yourself and your experience in Java development okay so uh for the past three years uh I have been a Java developer and uh working on backend system uh by using spring boot Spring Security uh rest API etc etc and uh after getting my computer science degree uh I started working on springboard microservices and uh uh connecting multiple apis and multiple systems right uh then later I work with complex projects and I also leted and delivered few features of the complex projects to
(00:41) the clients uh so yeah that's all about myself and my experience in Java development okay so uh can you please share about your recent projects okay so uh the most recent project I worked on uh is Health Connect uh basically it's a tele medicine platform uh designed to facilate remote consultations uh between patients and healthc care professional right so the platform I mean uh I mean this platform is just to uh make Health Care More accessible uh especially in rural or under under served areas and to
(01:25) provide a convenient option for patients to seek medical advice without needing to visit a healthare facility in person so the these were the features of this project and as a Java developer on this project uh I was deeply involved in both the design and implementation phases uh focusing particularly on backend development to ensure the security scalability and uh robustness things uh on this project so yeah okay so uh as your as your project is sensitive so what specific security measures do you implement in Health Connect to ensure
(02:04) data privacy um secur okay so basically I implemented several security things right firstly uh I used https to encrypt data in transient State okay in transit okay then for data at press I applied encryption using that one a s 256 something like that I used that for encryption and I also integrated o to for secure access control and allowing only authenticated users to access uh certain information and then I also made sure to regularly update C security measures and uh conduct penetration testing to identify any vulnerabilities
(02:54) so uh that's how uh I added security things in my project okay so uh how do how did you design and develop the restful API for patients registrations and appointment scheduling okay uh patient registration and appointments so in designing and developing the restful apis for patient registering and appointment scheduling I basically followed R principles and I use spring boot for its Simplicity in uh creating Standalone production grade applications right I designed the apis to be stateless and I also use Json for
(03:38) data exchange and uh making them easily consumable by different clients right uh I also ensured that each API in points was uh uh using uh HTTP verbs like uh uh we have as we know get post put and delete appropriately to uh reflect the actions being performed right and for a patient registration I used a post request and uh basically for patient registration I used for I used a post request and for appointment scheduling I uh used both post for creating appointments and get for retrieving available slots so that's how
(04:19) basically uh okay yeah okay so uh can you explain the concept of Java memory model uh and especially uh the difference between the stack and Heap memory okay so in Java memories split basically into two spaces stack and heave right uh the stack is for executing threads and storing primitive variables and Method called references right uh that offers quick access but limited space right and the Heap is for storing objects so it's larger and managed by garbage collection uh this separation helps Java efficiently manage memory for better
(05:04) performance and relability and allowing automatic memory allocation for objects and safe execution of threads so yeah uh that's the difference okay so uh can you just brief briefly describe that how does the garbage collection work in Java okay yes I can so basically Java garbage collection automatically identifies and deletes object that are no longer in use okay and clearing Heap spaces right so uh basically it's a form of memory management uh that eliminates a manual clearing of unused objects right uh this process helps prevent
(05:49) memory leaks and ensures efficiently use of memory okay so so the garbage collectors do this by uh tracking of object references uh object without references are considered for deletion okay so basically this simplifies Java programming by uh managing memory cleanup up behind the scen so yeah I think that's how garbage collection work in Java okay so uh how does the Java achieve polymorphism okay polymorphism okay so polymorphism in Java allows methods to do different things uh based on the objects it is acting upon even though they share the
(06:39) same name okay so basically it's achieved through method overriding uh that that means same method name different implementation across sub classes and interface implementation that means different classes implementing the same interface so this enables flexing and scalable code where one interface can represent multiple implementations and uh making the code base easier to extend and maintain so yeah uh that's how so uh can you explain can you provide a real life example where polymorphism is beneficial real life
(07:23) example okay me so I think I think in a graphic user interface uh a single event like a mouse click can be handled differently depending on the element clicked like uh a button a check boox or a drop down right so I think this is a polymorphism in action uh I mean the same action click triggers different responses one for button one for checkbox one for drop down and making code reusable and system adaptable so I think this is one of the example real life example of polymorphism okay so what are Java streams uh Java
(08:10) [Music] streams so Java streams are a collection processing Tool uh that was introduced in java8 and providing a high level obstruction for operations or collections like uh filter map or reduce Okay so uh streams make it easy to process collections in a declarative way okay supportive functional style operations on stream of elements so uh they basically simplify coding and improve readability and can be parallelized for a better performance so yeah that's what I know about Javas stream okay so uh how would you use
(08:56) streams to filter and map a collection of objects [Music] s okay so to use Java streams to filter and map a collection of objects uh I would start with a collection uh convert it into a stream and apply the filter method to keep only the elements that match a condition and then I uh would use the map method to transform the remaining elements okay so basically this approach is uh powerful for processing collections uh concisely and expressively so yeah okay so uh can you explain the concept of synchronized keyword in Java
(09:45) synchronized keyword yeah I can explain so basically uh the synchronized keyword in Java is used to ensure that only one thread can execute a method or block at a time okay so it is important for preventing thread interferences and memory consistency errors uh and making sure that changes made by one threads are visible to other okay so by using these uh synchronized helps in writing thread safe code that avoid concurrency issues so that's what the concept uh available of synchronized keyword in Java okay so uh can you please describe
(10:29) a scenario where not using synchronized could cause an issue okay scenario where not using synchronized would cause an issue yes uh we have multiple scenarios so I can tell you one so without using synchronized uh multiple threads accessing and modifying the same object can lead to inconsistent object States or unexpected results uh for example in a bank application if withdrawals are proceed Sim ously without synchronization it could result in an incorrect balance as the updates May overr each other so this is one of
(11:07) the example as we know Banks things are very uh sensitive so this is one of one example there are multiple so yeah okay so uh can you explain the difference between checked and unchecked exceptions in Java okay so check T sections are those that the compiler checks at comp compile time and ensuring that they are either caught or declared in the method signature right whereas in checked exceptions or we can say runtime exceptions are not checked at compile time basically they usually indicate programming errors uh such as logical
(11:47) mistakes or improper use of an API uh understanding the difference helps in handling exceptions and appropriately and yeah so that's all about what the difference okay so uh is it good practice to use exceptions for control flow so basically uh yeah yeah go ahead one [Music] second so using exception for control flow is generally considered bad practice uh because exceptions are mean for error handling not regular control flow M using them for control flow can make code harder to understand and maintain and it may negatively impact
(12:41) performance due to the overhead of creating and handling exception so uh it's better to use conditional statements for uh control flow okay so uh can you describe how would you implement a single T pattern in Java okay so to implement a Singleton pattern in Java uh I would use uh I mean first I would make sure to make the Constructor private and Define a private static instance of the class and also provide a public static methods that Returns the instance right uh this uh uh tells that only one sance of the class is created
(13:26) and accessible globally so the single pattern is useful for cases where a single shared resources like a database connection is needed okay so uh yeah can you uh discuss the different ways to create a singl ton and their tradeoffs uh discuss way this different ways to create single uh no sorry I'm not sure on this okay so uh what is the reflection in Java and when would you use it uh reflection is a feature in Java uh basically uh that allows uh examining or modifying the runtime behavior of a class at runtime
(14:21) okay it can be used to inspect classes uh interfaces fields and methods okay so call methods and access fields and create new instance of the classes something like that right so reflection is a powerful for dynamic operations where uh we don't know the classes and methods in advance okay however it should be used uh as it can be introduced security risk and reduce performance and uh something like that so I know only uh these things about reflection in Java and like yeah okay okay so uh is there any disadvantages of
(15:04) using reflection okay so the uh yeah I think there are there might multiple disadvantages but what I know is the main disadvantages of using reflection uh contains performance overhead because reflection operations are slower than the direct code security risk as a reflection can exist private fields and methods right potentially byp passing encapsulation and exposing sensitive data and breaking code changes as reflection relays on relies on runtime behavior that can change uh making the code more fragile and harder
(15:41) to maintain so yeah I think these are the main disadvantages M okay okay so uh please explain the dependency injections principle in Springs okay so dependency injection principle so basically uh dependency injection is uh one of the core principle of spring uh that allows the creation of loosely coupled application okay and by injecting dependencies into components uh rather than creating them inside the components basically spring enables better modularization and easier testing so this dependency injection
(16:24) simplifies the management of application components and their dependencies and and making code cleaner and more maintainable okay so uh how does spring board simplify the management of application dependencies okay how does so basically spring boot simplifies dependency management by automatically configuring spring components and third party libraries okay so developers don't have to manually set up and wire them so it uses sensible uh defaults and provide starter kits for different types of applications which uh bundle the
(17:09) necessary dependencies and configuration so uh this greatly reduces the initial step time and effort and allowing developers to focus on building the application so that's how a spring Bo simplify management of application independency okay okay so uh what are the spring board startup and how do they help in application development spring boot starter so yeah they are very important so because so spring board starter are a set of convenient dependencies descriptors uh that we can include in our application
(17:46) right each starter provides a comprehensive set of dependencies required for a specific type of development uh like web data access or security effectively abstracting the uh boiler plate dependency manag management okay so this makes uh it easy to get started with a spring boot application as we just need to add the appropriate starters to uh build our configurations and applications so yeah okay so uh can you name a few common starter and their use cases common starter okay so common spring board starter include spring boot
(18:29) starter web uh for building web applications including restful application using spring MVC uh spring boot starter data jpa for exising database using spring data jpa and there is one more spring boot starter security for adding security to Applications so these starter simplifies the setup making by uh preconfiguring the necessary spring components and uh dependencies for specific task and uh making it easier develop robust applications of java so that's that's that's I mean uh these are the common
(19:07) starters uh that's what I know okay so uh can you describe the role of rest controller and uh request mapping annotation in Spring MVC yeah yeah so the rest controller annotation in Spring MV is used to create restful web services uh by making a class as a controller where every method returns a domain object instead of a view okay and the request mapping annotation is used to map web request to specific Handler functions allowing a fine green controller over endpoint exposure so together they play a a very important
(19:46) role in Spring MBC okay so uh how do you design a simple restful service for managing user profiles um okay so to design a simple restful service for managing user profile uh I would start by creating a user profile class to represent user data okay then I would use a rest controller annotation to create a controller class with methods to handle CED operations like uh create read update and delete okay each method would be annotated with get mapping post mapping put mapping or delete mapping to map HTTP request to specific action
(20:30) uh this setup helps Springs web support to easily Implement Rest full service so that's how I would design simple restful service for managing user profiles okay so uh how does the Spring Security handle authentication and authorization uh Spring Security handles authentication by verifying users identity and authorization by determining exess rights to resources okay it provides comprehensive security service for Java applications uh including HTTP security uh method level security and uh ldap authentication
(21:11) right so by integrating these uh mechanism Spring Security ensures that only authenticated and authorized users can access protected resources uh enhancing the application security yeah so okay so uh what are some common security pitfalls in web applications okay so common security pitfalls in web application uh there are many so the commons are uh SQL injection cross Sid scripting and exposing sensitive data these vulnerabilities can lead to unauthorized data access uh data tempering and uh some uh data violations
(21:57) right and to manage this risk uh it's essential to validate input and and code output and use prepared statements for database exess right and uh Implement proper authentication authorization obviously and mechanism uh among any other security practices okay so uh can you explain the concept of spring data GPA uh and its advantages um okay so spring data jpa basically simplifies data access operations by providing a framework to implement repositories that abstract boiler plate credit operations okay uh it integrates with the jpa uh Java
(22:42) persistence API uh allowing for each database interaction using Java objects and classes uh advantages include uh I mean advantages contain there are advantages like reduce poate code easy query method declaration uh and automatic transaction management and making it easier to implement dat taiser so yeah okay so uh how do you handle complex queries using spring data jpa complex queries so basically the complex queries that go beyond basic credit operations uh spring data jpa have the query orientation to define the
(23:25) custom query custom Java persistence query Lang language okay or native queries directly on repository method uh additionally it offers specifications and query DSL for dynamically building queries based on various conditions uh this flexibility allows for precise control over uh query ex execution and optimization okay so uh can you explain the role of actuator in springboard Okay so um actuator in Spring boot basically provides buil-in production ready features uh to Monitor and manage applications right it uh
(24:09) basically offers insights into the internals of the application uh such as metrics thread DS and health status through HTTP endpoints or jmf right uh in a microservice architecture actuators uh in microservice architecture or spring boot uh actuators enable centralized monitoring and management facilitating the observations of individual Service uh behavior and health in real time so yeah okay so uh how would you use actuator in microservice architecture for monitoring okay so in a microservice architecture actuator can be used to
(24:53) expose HS metrics and operational information for each service right this data can be aggregated by monitoring tools to provide an overview of the system's health and performance and uh actuators helps in identifying issues earlier early sorry uh managing System state and ensuring that service are running optimally uh which is critical for maintaining High availability and performance in microservice environments so yeah that's how I would use actuators and it actuators can be used in a microservice architecture for
(25:30) monitoring okay so uh what is aspect oriented programming and how is it implemented in Spring okay so basically expect oriented programming in Spring allows uh separating cross cutting concerns like logging security or transaction management okay from the business logic okay so basically this is implemented using aspects and advice that encapsulates behavior that should be applied across multiple methods or classes okay and this separations of concerns leads to cleaner uh more maintainable code by enabling reusable
(26:11) aspects that can be applied declaratively so yeah okay so uh can you provide a example use case for aop in logging or security uh use case Okay so an example use case for aop is basically logging uh where an aspect can be defined to automatically log entry and exit and exception details for the methods across the application without modifying the business logic uh this approach centralized logging logic making it easier to maintain and modify without impacting the core functionality so yeah that's this case
(26:54) so uh can you can you describe how how you would configure a spring inut application using both application properties and application yml files okay so spring boot application can be configured using both application properties and application EML file the properties files offers a simple key value format okay whereas the ml file provide a more structured and hierarchical format both method support environment specific configuration okay but ml files are often preferred for a complex configuration uh due to its readability
(27:32) and support for nesting okay the choice between them depends on the Project's needs and yeah definitely developers preference but I would uh prefer the EML file over properties file
