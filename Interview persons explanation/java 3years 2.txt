(341) Java Spring Boot 3 Years Experience Interview - YouTube
https://www.youtube.com/watch?v=JXOwT86h0gg

Transcript:
(00:01) hey guys today we have uh anit Kumar davan with us who has a three years of experience in Java and Springwood yeah so yeah anit let's start so can you please introduce yourself uh yes so my name is anit and I'm from Bihar So currently I'm living in Pune and I'm working with Accenture for the last uh uh p uh 3 years uh I am working on Java for Java and spring and my services so yeah apart from that I have uh I have worked on the AWS uh kit uh bamboo c p sonar andity cool cool okay so can you please
(00:46) let me know what kind of projects uh have you worked on like explain the roles that you are dealing with uh yes so in in my project it is a telecommunication project so it's Australia based uh uh project so basically in this uh uh just like here we have go uh there is a TENS so that basically uh on that I'm working so I'm working uh on the uh uh like uh Java Java and springb and micros services so there are so many microservices on which I'm working working on so yeah these These are the projects okay so sure let's start so
(01:29) first question here is can we print something on Console without the use of main method in Java sorry can you again yeah so my question is can we print something on Console without using the main method in Java so I don't want to use main method in my class but I want to print something on Console um I haven't used but uh uh so every execution starts from the main method so first main will start and then uh everything will start so I think it will not print uh uh is there any functionality that we can use through
(02:08) which without main method we can do our operations are you aware of this uh no okay noes actually we can do this with the help of static block so what happens is at static block we can write the system or a printer in and because it is performing before the meain method so we don't require the meain method it's with class right that's why okay okay yeah so the next question is uh like uh yeah can we have multiple static blocks in code yeah we have we can have multiple static block okay and what is the use of
(02:46) static block uh to initialize the uh static data members we can use the static initializer block yeah so we can have multiple okay okay and let me know what is finally block so finally block is uh something which we use for uh uh so suppose we have uh we have used some resources which we want to uh close after using that so for that we can use the finally block and finally block always will always be executed except uh when uh uh when exit Zer will be system.
(03:23) exit Z will be there so that then it will uh not work okay okay so can we have multiple fin blocks in Java uh multiple finally block we can have multiple Finly block uh but uh uh but which finally block will be executed if we have multiples and which one will be executed by uh compiler so the the uh the the one which will be uh uh the one which will be inside uh uh after the catch block uh that will be uh [Music] actually okay okay the answer is no we cannot have multiple finity blocks because uh there is only one finity for one try catch pair so that is how the
(04:14) compile understands we cannot have multiple final blocks in this okay so the next question is uh have you worked with collections in Java yes I yeah so what type of collections have you Incorporated in your projects uh Aral mainly we have used erist and set we have used okay so can you let me know what is the difference between the set and err list why what are they what are they used for and why they have been not able to okay okay so can you let me know like what is the purpose that they are designed for why they have
(04:50) been created actually voice is not coming now it is coming okay one second this the whole mic uh am I Audible right now yeah yeah now you're a okay so uh can you just let me know what are the difference between the arist and set like why they have been created arist and set so uh so arist basically it's a uh ordered collection and that is it will uh order it will uh remember the order of insertion and set is uh set is unordered collection that is it will not remember the order of insertion so analyst is a index based
(05:31) operation uh we can do and uh in the set it is not an index based operation we can do uh in the errorist it is uh it allows the duplicate and in the set it not allows the duplicate okay uh have you worked with hashmap like uh what's hashmap yes so if I ask question regarding hashmap is it okay right um uh so so my question is can we include class as a key in hashmap uh class as a three hashmap class but I haven't Implement CL sorry okay okay uh so basically class is what it's a mutable object right and
(06:34) in collections we can have only immutable objects that is why we are incorporating only the uh rapper class objects because rapper class is immutable so class is mutable object but still we can uh include class as a key by overwriting the hash code and the equals method because uh the class is mutable object so there will be different hash codes generated when Once the data of the object is changed right so we need to make sure that our class object returns single only same hash code and equals every time the uh object
(07:06) is passed like class object is passed is a key so we can do this but we have to compulsorily override the hash code and equals method in our uh code that's the way to implement oh okay okay got it yeah so okay so next question is um uh do you know what is a reflection in Java uh what is reflection reflection yeah reflection okay have you like worked uh worked according to reflection like some used reflection in somewhere in your project no reflection I haven't like actually I haven't aware about this
(07:52) reflection part yeah okay okay no issues no issues um basically the reflection is nothing but a feature which allows us to modify the behavior of methods classes and interface in Java so there are many methods like get class get method and get get Constructors due to which we can you know modify the behavior and write our code accordingly so it's just a feature to make some changes like that and uh moving on to uh you're aware about Java it features new features of Okay so can you just explain me what are
(08:26) the functional interfaces yeah function interface is the interface which has only one uh abstract method so that is the function interface for example we have reenable we have iterator we have comparator so these are the function interface okay so what is this used for can you explain me in detail like comparator comparable yeah so comparator we use uh so for sorting purpose we use a comparator and iterator we use for if you have to iterate on the collection so is a cursor where we can iterate The Collection uh so it is used for this
(09:08) purpose okay cool uh so next question is uh can functional interface extend another interface uh functional interface can because you aware right one interface can extend another interface that's supported in Java right so can functional interface extend another interface uh functional interface it has one abstract point so it can be extend uh but uh it should be with the same method sorry which method same method which we are okay okay so basically uh you are right that function interface is single
(10:10) abstract method right so if we try to extend another interface what happens is that that interface if it contains abstract method then that uh rule will be violated of functional interface so that is why functional interface cannot extend another interface it can inherit only those interfaces which has static and default methods means which has body to it so that the property of function interface is still alive just to maintain that yeah to maintain its uh yeah property okay so the next question is uh can you please uh let me know if
(10:43) you worked on streams stream API aware yeah yeah I'm aware so stream is a like is a set of uh the uh stream basically so we use for the set of the uh to do some set of operations on the elements of the collection so we can do uh streams we can with the help of streams we can do so just like we have intermed operations we have terminal operations so terminal operations like we have filter we have map so these are the terminal uh these are the intermate operations and terminal operations we have like uh we
(11:23) have uh for which uh we can use we have collect so these are the strings okay so what is the difference between filter and map sorry what is the difference between filter function and map function of stream API yeah so filter uh we will use to filter the uh our strings so whatever the uh strings elements we have we can we can filter with the help of filter method so suppose we want to filter even even and odd so with the help of uh filter uh we can filter the particular uh particular records okay uh and map is used to
(12:07) suppose we want to uh map uh that uh map that those elements to the double so we can use it like map to double and map to in like that we can use and we can get it the DAT precisely if you want to put we can say that map basically operates on every element okay and it returns entire elements list as it is but if we want to uh filter out means if you want to discard some elements based on some condition so we are not returning entire element as our output but in filter what happens is that we reduce the elements
(12:44) present in the original list that's the key difference can okay so good um next moving on to Spring boot uh so what is the basic difference uh that spring boot is having from Spring so uh in a spring we have to do do a lot of configuration but in a spring boot we don't have to do much configuration instead of that we can use uh uh annotations and all okay so uh so spring uh we can use annotation so but it is a mix mixing of the XML based configuration and the spring boot uh sorry annotations and in Spring boot we
(13:27) have uh annotations and we can configuration we have to do it in the appliation properties but there is the minimum uh configuration we can do in the spring boot we have uh we have uh embeded server so and spring we don't haveed server so can we change can we change the type of server in springbot uh in Spring yes we can change yeah okay so have you used different servers uh gu server I can't tell much which you have used which uh server you have used server in the sense not getting that server like what is the type of
(14:16) server that you have used in Project like the default server of uh I'm not much aware aware about this but yeah we were using some VPN and so that was connecting with the server and then we were connecting okay so can you name some dependencies that you have used in your project uh dependencies like uh we were using springb starter test springb starter web also uh actuator also and uh for for we using test so these dependencies we were us okay can you tell me uh various scopes of Bean if you SC yeah Scopes yeah so we have uh
(15:06) Singleton scope we have protype scope so these are the main two Scopes we are using the so by default it will be single time okay and rest like session and request is also there for HTTP request uh are you aware about that sorry can come for the h request we have request and session uh scope as well yeah yes yes yeah and okay so moving on to next question how have you implemented caching in springbot application cashing no okay um okay are you aware about the UT and methods like uh what are ad import methods and why we use
(15:58) them okay um basically like add inputed methods are nothing but if you're trying to request the same type of data right it is ID inputed means identical requests are made okay to access the same uh resource many times so these are the item means duplicate you're making dup duplicate request right multiple times so that is why we have the get put and delete HTP methods which will uh like it will not change the state of the server even if multiple times the same resource is being requested uh so this is important like get put and delete if
(16:47) you're trying to access same thing multiple times that's what it is uh okay so like basically to they provide the consistency right uh they do not change the state of the data so that's why use and what is the difference between request param and path variable if you will at theate request param part variable are you aware about okay so uh so request parameter we can if if something which is coming from the request we will that parameter we will we will have to uh configure into the path variable and the request
(17:26) parameter so suppose some ID we want with the help of ID that we want to fetch data so uh so we have that ID we have to configure into the part variable okay and request so the difference between them request parameter so request parameter that is some uh that is uh for suppose we are we have to get okay so that request parameter we have to both are used for both are used for capturing data from get URL you said okay that's correct so why both of them have been like what is the difference that both of them have been
(18:22) created basically like request param is like it's it's in the key value play right so if you pass after question mark in the get URL name equals to so and so and employed equals to so and so so if you're passing key equals to value that pair will be captured in request baram and if you pass only single value like slash after slash just single value that will be captured in your path variable so inside the curly PR whatever you pass ID and whatever that is uh captured in the path variable and the key value pair
(18:51) is nothing but a query parameter so it's that's how the name request par there okay okay yeah so are you aware about the configuration annotation at theate configuration yeah at theate configuration we use yeah so what so so if if if we have to write some configurations of particular uh uh application so in that particular uh class we have to annotate with ADD configuration and we have to write all the configuration that okay yeah and uh can you let me know what type of annotations have you used till now in your
(19:37) project so we have used rest controller we have used uh request mapping uh atate controller advice uh exception Handler so these uh service annotations these annotations okay so uh what is the use of adate uh means jpa repository if you have used add a add repository class if that class extends JP repository so what what things it incorporates so JP if we extend with the JP repository so uh we can directly uh we can have we have we can have directly uh methods Rel to related to uh databases so if we want to F data so we
(20:25) can we can we can get uh methods uh in that JP repository so like find all find so find by ID like that methods we can we have inil method in thatp that can directly use okay um so basically if we've heard about atate transaction annotation yes okay so it internally calls GP repository internally calls at theate transaction so we don't have to separately go and write the transaction it manages internally uh yeah so these are the things and uh are you aware about the design patterns in Java yes okay so let me know okay so uh
(21:10) so design pattern is a solution of any specific problem so suppose uh we want we have one class and we we have created that we have created one uh object of that class and we want to use that uh that one class uh class object into the entire application so we so we can uh we can solve this problem with the help of Singleton design button so we can have so many design buttons Singleton we have prototype we have structural so these okay Singleton can you explain me what is Singleton design pattern uh Singleton design pattern is
(21:53) uh in the Singleton design pattern we have only one uh object for the entire application okay only one so the question is that how can we prevent single ton object from cloning if we try to clone the singon object right so it will create another object so this will break the uh design pattern rules of Singleton class so what is the strategy of what methods can be use for preventing the Singleton object from being cloned uh do you you know yeah uh so so basically if you will create another object also in the single
(22:36) turn design pattern so that will try to clone that yeah yeah so how will we prevent the cloning of the single object are you up okay so basically like uh when we clone the object right it will it will just break the single ton r of it right what we can do is that we can just override the Clone method and we can throw an exception from the Clone method that okay the Clone is not supported exception so this is how like we can prevent just one object at one particular time for single we can implement this cloning but we can we
(23:17) have to like override the Clone method in the class and through the exception okay so yeah okay thank you and I'm done with my you yeah
